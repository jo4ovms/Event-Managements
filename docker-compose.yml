services:
  postgres:
    image: postgres:17-alpine
    container_name: event_management_db
    restart: always
    environment:
      POSTGRES_DB: event_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - event_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d event_management']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: event_management_backend
    restart: always
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/event_management
      SESSION_SECRET: secret-session-key
      FRONTEND_URL: http://localhost:3000
    ports:
      - '3001:3001'
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - event_network
    command: pnpm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: event_management_frontend
    restart: always
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - '3000:3000'
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - event_network
    command: npm run dev -- --host

volumes:
  postgres_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  event_network:
    driver: bridge
